name: Build and Deploy to Sandbox

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout this repo
      uses: actions/checkout@v4
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 8
        
    - name: Build with Maven
      run: mvn -B clean package --file pom.xml
      
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
        
    - name: Upload artifact 
      uses: actions/upload-artifact@v4
      with:
          name: artifacts
          path: target/*.jar
  publish-to-exchange:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download the built JAR file
        uses: actions/download-artifact@v4
        with:
          name: artifacts

      - name: Publish to Exchange
        env:
          connectedAppId: ${{ secrets.CONNECTED_APP_ID }}
          connectedAppSecret: ${{ secrets.CONNECTED_APP_SECRET }}
          
        run: |
          mvn clean deploy -DskipTests --settings settings/settings.xml \
           -DconnectedAppId=$connectedAppId \
           -DconnectedAppSecret=$connectedAppSecret \
           
            
  deploy:
    needs: publish-to-exchange
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:    
    - name: Checkout this repo
      uses: actions/checkout@v4
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 8
        
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: artifacts
        
    - name: Deploy to CloudHub 2.0
      env:
        ANYPOINT_USERNAME: ${{ secrets.ANYPOINT_USERNAME }}
        ANYPOINT_CLIENT_ID: ${{ secrets.ANYPOINT_CLIENT_ID }}
        ANYPOINT_CLIENT_SECRET: ${{ secrets.ANYPOINT_CLIENT_SECRET }}
        ANYPOINT_PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
         -Dmule.artifact=$artifactName \
         -Dprovider=MC \
         -Danypoint.username="$ANYPOINT_USERNAME" \
         -Danypoint.password="$ANYPOINT_PASSWORD" \
         -Danypoint.clientId="$ANYPOINT_CLIENT_ID" \
         -Danypoint.clientSecret="$ANYPOINT_CLIENT_SECRET" \
         -Dcloudhub2.environment="Sandbox" \
         -Dcloudhub2.target="Cloudhub-US-East-2" \
         -Dcloudhub2.applicationName="dtworld-order-sync-app-v1-sandbox" \
         -Dcloudhub2.vCores="0.1" \
         -Dcloudhub2.replicas="1"
